// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: havok.proto

package genproto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DispatcherEvent_Type int32

const (
	DispatcherEvent_Subscribed       DispatcherEvent_Type = 0  // 订阅成功
	DispatcherEvent_Disconnected     DispatcherEvent_Type = 1  // 中断订阅
	DispatcherEvent_Ping             DispatcherEvent_Type = 2  // 心跳包
	DispatcherEvent_LogRecord        DispatcherEvent_Type = 10 // http日志回放，未来可能增加tcp协议回放
	DispatcherEvent_JobStart         DispatcherEvent_Type = 20 // 任务开始，此时需要读取JobConfiguration
	DispatcherEvent_JobStop          DispatcherEvent_Type = 21 // 任务异常结束
	DispatcherEvent_JobFinish        DispatcherEvent_Type = 22 // 任务自然结束
	DispatcherEvent_JobConfiguration DispatcherEvent_Type = 29 // 下发任务配置，用于任务进行中刷新配置
	DispatcherEvent_StatsCollection  DispatcherEvent_Type = 30 // 采集node的统计报告
	DispatcherEvent_OccurError       DispatcherEvent_Type = 99 // 发生错误
)

// Enum value maps for DispatcherEvent_Type.
var (
	DispatcherEvent_Type_name = map[int32]string{
		0:  "Subscribed",
		1:  "Disconnected",
		2:  "Ping",
		10: "LogRecord",
		20: "JobStart",
		21: "JobStop",
		22: "JobFinish",
		29: "JobConfiguration",
		30: "StatsCollection",
		99: "OccurError",
	}
	DispatcherEvent_Type_value = map[string]int32{
		"Subscribed":       0,
		"Disconnected":     1,
		"Ping":             2,
		"LogRecord":        10,
		"JobStart":         20,
		"JobStop":          21,
		"JobFinish":        22,
		"JobConfiguration": 29,
		"StatsCollection":  30,
		"OccurError":       99,
	}
)

func (x DispatcherEvent_Type) Enum() *DispatcherEvent_Type {
	p := new(DispatcherEvent_Type)
	*p = x
	return p
}

func (x DispatcherEvent_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DispatcherEvent_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_havok_proto_enumTypes[0].Descriptor()
}

func (DispatcherEvent_Type) Type() protoreflect.EnumType {
	return &file_havok_proto_enumTypes[0]
}

func (x DispatcherEvent_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DispatcherEvent_Type.Descriptor instead.
func (DispatcherEvent_Type) EnumDescriptor() ([]byte, []int) {
	return file_havok_proto_rawDescGZIP(), []int{0, 0}
}

type DispatcherEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type DispatcherEvent_Type `protobuf:"varint,1,opt,name=type,proto3,enum=wosai.havok.DispatcherEvent_Type" json:"type,omitempty"`
	// Types that are assignable to Data:
	//	*DispatcherEvent_Log
	//	*DispatcherEvent_Job
	//	*DispatcherEvent_Stats
	Data isDispatcherEvent_Data `protobuf_oneof:"data"`
}

func (x *DispatcherEvent) Reset() {
	*x = DispatcherEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_havok_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DispatcherEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DispatcherEvent) ProtoMessage() {}

func (x *DispatcherEvent) ProtoReflect() protoreflect.Message {
	mi := &file_havok_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DispatcherEvent.ProtoReflect.Descriptor instead.
func (*DispatcherEvent) Descriptor() ([]byte, []int) {
	return file_havok_proto_rawDescGZIP(), []int{0}
}

func (x *DispatcherEvent) GetType() DispatcherEvent_Type {
	if x != nil {
		return x.Type
	}
	return DispatcherEvent_Subscribed
}

func (m *DispatcherEvent) GetData() isDispatcherEvent_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *DispatcherEvent) GetLog() *LogRecord {
	if x, ok := x.GetData().(*DispatcherEvent_Log); ok {
		return x.Log
	}
	return nil
}

func (x *DispatcherEvent) GetJob() *JobConfiguration {
	if x, ok := x.GetData().(*DispatcherEvent_Job); ok {
		return x.Job
	}
	return nil
}

func (x *DispatcherEvent) GetStats() *StatsRequest {
	if x, ok := x.GetData().(*DispatcherEvent_Stats); ok {
		return x.Stats
	}
	return nil
}

type isDispatcherEvent_Data interface {
	isDispatcherEvent_Data()
}

type DispatcherEvent_Log struct {
	Log *LogRecord `protobuf:"bytes,2,opt,name=log,proto3,oneof"`
}

type DispatcherEvent_Job struct {
	Job *JobConfiguration `protobuf:"bytes,3,opt,name=job,proto3,oneof"`
}

type DispatcherEvent_Stats struct {
	Stats *StatsRequest `protobuf:"bytes,4,opt,name=stats,proto3,oneof"`
}

func (*DispatcherEvent_Log) isDispatcherEvent_Data() {}

func (*DispatcherEvent_Job) isDispatcherEvent_Data() {}

func (*DispatcherEvent_Stats) isDispatcherEvent_Data() {}

type ReplayerRegistration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ReplayerRegistration) Reset() {
	*x = ReplayerRegistration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_havok_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplayerRegistration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplayerRegistration) ProtoMessage() {}

func (x *ReplayerRegistration) ProtoReflect() protoreflect.Message {
	mi := &file_havok_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplayerRegistration.ProtoReflect.Descriptor instead.
func (*ReplayerRegistration) Descriptor() ([]byte, []int) {
	return file_havok_proto_rawDescGZIP(), []int{1}
}

func (x *ReplayerRegistration) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type LogRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url     string                 `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`                                                                                               // eg. http://api.github.com/orgs/Wosai/actions/permissions
	Method  string                 `protobuf:"bytes,2,opt,name=method,proto3" json:"method,omitempty"`                                                                                         // GET/POST ...
	Header  map[string]string      `protobuf:"bytes,3,rep,name=header,proto3" json:"header,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 请求头
	OccurAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=occur_at,json=occurAt,proto3" json:"occur_at,omitempty"`                                                                        // 日志发生日期
	Body    []byte                 `protobuf:"bytes,8,opt,name=body,proto3" json:"body,omitempty"`                                                                                             // 完整透传body内容
}

func (x *LogRecord) Reset() {
	*x = LogRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_havok_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogRecord) ProtoMessage() {}

func (x *LogRecord) ProtoReflect() protoreflect.Message {
	mi := &file_havok_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogRecord.ProtoReflect.Descriptor instead.
func (*LogRecord) Descriptor() ([]byte, []int) {
	return file_havok_proto_rawDescGZIP(), []int{2}
}

func (x *LogRecord) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *LogRecord) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *LogRecord) GetHeader() map[string]string {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *LogRecord) GetOccurAt() *timestamppb.Timestamp {
	if x != nil {
		return x.OccurAt
	}
	return nil
}

func (x *LogRecord) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

type JobConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rate  float32 `protobuf:"fixed32,1,opt,name=rate,proto3" json:"rate,omitempty"`   // 回放增益倍数，1.0表示1:1回放，2.0表示放大一倍回放
	Speed float32 `protobuf:"fixed32,2,opt,name=speed,proto3" json:"speed,omitempty"` // 回放速度， 1.0表示原速回放，2.0表示快放一倍
	Begin int64   `protobuf:"varint,3,opt,name=begin,proto3" json:"begin,omitempty"`  // 开始回放时间，毫秒级别
	End   int64   `protobuf:"varint,4,opt,name=end,proto3" json:"end,omitempty"`      // 结束回放时间，毫秒级别
	Stuck int64   `protobuf:"varint,5,opt,name=stuck,proto3" json:"stuck,omitempty"`  //模拟流量锯齿特性(临时阻塞replayer消费)
}

func (x *JobConfiguration) Reset() {
	*x = JobConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_havok_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobConfiguration) ProtoMessage() {}

func (x *JobConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_havok_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobConfiguration.ProtoReflect.Descriptor instead.
func (*JobConfiguration) Descriptor() ([]byte, []int) {
	return file_havok_proto_rawDescGZIP(), []int{3}
}

func (x *JobConfiguration) GetRate() float32 {
	if x != nil {
		return x.Rate
	}
	return 0
}

func (x *JobConfiguration) GetSpeed() float32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *JobConfiguration) GetBegin() int64 {
	if x != nil {
		return x.Begin
	}
	return 0
}

func (x *JobConfiguration) GetEnd() int64 {
	if x != nil {
		return x.End
	}
	return 0
}

func (x *JobConfiguration) GetStuck() int64 {
	if x != nil {
		return x.Stuck
	}
	return 0
}

type StatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId   int32 `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`       // 请求批次id
	RequestTime int64 `protobuf:"varint,2,opt,name=request_time,json=requestTime,proto3" json:"request_time,omitempty"` // 请求发起时间
}

func (x *StatsRequest) Reset() {
	*x = StatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_havok_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatsRequest) ProtoMessage() {}

func (x *StatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_havok_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatsRequest.ProtoReflect.Descriptor instead.
func (*StatsRequest) Descriptor() ([]byte, []int) {
	return file_havok_proto_rawDescGZIP(), []int{4}
}

func (x *StatsRequest) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *StatsRequest) GetRequestTime() int64 {
	if x != nil {
		return x.RequestTime
	}
	return 0
}

type StatsReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReplayerId       string                  `protobuf:"bytes,1,opt,name=replayer_id,json=replayerId,proto3" json:"replayer_id,omitempty"`
	RequestId        int32                   `protobuf:"varint,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	ReportTime       int64                   `protobuf:"varint,3,opt,name=report_time,json=reportTime,proto3" json:"report_time,omitempty"`
	Stats            []*AttackerStatsWrapper `protobuf:"bytes,4,rep,name=stats,proto3" json:"stats,omitempty"`
	PerformanceStats map[string]float64      `protobuf:"bytes,5,rep,name=performance_stats,json=performanceStats,proto3" json:"performance_stats,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
}

func (x *StatsReport) Reset() {
	*x = StatsReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_havok_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatsReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatsReport) ProtoMessage() {}

func (x *StatsReport) ProtoReflect() protoreflect.Message {
	mi := &file_havok_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatsReport.ProtoReflect.Descriptor instead.
func (*StatsReport) Descriptor() ([]byte, []int) {
	return file_havok_proto_rawDescGZIP(), []int{5}
}

func (x *StatsReport) GetReplayerId() string {
	if x != nil {
		return x.ReplayerId
	}
	return ""
}

func (x *StatsReport) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *StatsReport) GetReportTime() int64 {
	if x != nil {
		return x.ReportTime
	}
	return 0
}

func (x *StatsReport) GetStats() []*AttackerStatsWrapper {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *StatsReport) GetPerformanceStats() map[string]float64 {
	if x != nil {
		return x.PerformanceStats
	}
	return nil
}

type AttackerStatsWrapper struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name              string           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`          // 统计对象名称
	Requests          int64            `protobuf:"varint,2,opt,name=requests,proto3" json:"requests,omitempty"` // 成功请求次数
	Failures          int64            `protobuf:"varint,3,opt,name=failures,proto3" json:"failures,omitempty"` // 失败请求次数
	TotalResponseTime int64            `protobuf:"varint,4,opt,name=total_response_time,json=totalResponseTime,proto3" json:"total_response_time,omitempty"`
	MinResponseTime   int64            `protobuf:"varint,5,opt,name=min_response_time,json=minResponseTime,proto3" json:"min_response_time,omitempty"`
	MaxResponseTime   int64            `protobuf:"varint,6,opt,name=max_response_time,json=maxResponseTime,proto3" json:"max_response_time,omitempty"`
	TrendSuccess      map[int64]int64  `protobuf:"bytes,7,rep,name=trend_success,json=trendSuccess,proto3" json:"trend_success,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	TrendFailures     map[int64]int64  `protobuf:"bytes,8,rep,name=trend_failures,json=trendFailures,proto3" json:"trend_failures,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	ResponseTimes     map[int64]int64  `protobuf:"bytes,9,rep,name=response_times,json=responseTimes,proto3" json:"response_times,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	FailureTimes      map[string]int64 `protobuf:"bytes,10,rep,name=failure_times,json=failureTimes,proto3" json:"failure_times,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	StartTime         int64            `protobuf:"varint,11,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	LastRequestTime   int64            `protobuf:"varint,12,opt,name=last_request_time,json=lastRequestTime,proto3" json:"last_request_time,omitempty"`
}

func (x *AttackerStatsWrapper) Reset() {
	*x = AttackerStatsWrapper{}
	if protoimpl.UnsafeEnabled {
		mi := &file_havok_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttackerStatsWrapper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttackerStatsWrapper) ProtoMessage() {}

func (x *AttackerStatsWrapper) ProtoReflect() protoreflect.Message {
	mi := &file_havok_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttackerStatsWrapper.ProtoReflect.Descriptor instead.
func (*AttackerStatsWrapper) Descriptor() ([]byte, []int) {
	return file_havok_proto_rawDescGZIP(), []int{6}
}

func (x *AttackerStatsWrapper) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AttackerStatsWrapper) GetRequests() int64 {
	if x != nil {
		return x.Requests
	}
	return 0
}

func (x *AttackerStatsWrapper) GetFailures() int64 {
	if x != nil {
		return x.Failures
	}
	return 0
}

func (x *AttackerStatsWrapper) GetTotalResponseTime() int64 {
	if x != nil {
		return x.TotalResponseTime
	}
	return 0
}

func (x *AttackerStatsWrapper) GetMinResponseTime() int64 {
	if x != nil {
		return x.MinResponseTime
	}
	return 0
}

func (x *AttackerStatsWrapper) GetMaxResponseTime() int64 {
	if x != nil {
		return x.MaxResponseTime
	}
	return 0
}

func (x *AttackerStatsWrapper) GetTrendSuccess() map[int64]int64 {
	if x != nil {
		return x.TrendSuccess
	}
	return nil
}

func (x *AttackerStatsWrapper) GetTrendFailures() map[int64]int64 {
	if x != nil {
		return x.TrendFailures
	}
	return nil
}

func (x *AttackerStatsWrapper) GetResponseTimes() map[int64]int64 {
	if x != nil {
		return x.ResponseTimes
	}
	return nil
}

func (x *AttackerStatsWrapper) GetFailureTimes() map[string]int64 {
	if x != nil {
		return x.FailureTimes
	}
	return nil
}

func (x *AttackerStatsWrapper) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *AttackerStatsWrapper) GetLastRequestTime() int64 {
	if x != nil {
		return x.LastRequestTime
	}
	return 0
}

type ReportReturn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId int32 `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *ReportReturn) Reset() {
	*x = ReportReturn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_havok_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportReturn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportReturn) ProtoMessage() {}

func (x *ReportReturn) ProtoReflect() protoreflect.Message {
	mi := &file_havok_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportReturn.ProtoReflect.Descriptor instead.
func (*ReportReturn) Descriptor() ([]byte, []int) {
	return file_havok_proto_rawDescGZIP(), []int{7}
}

func (x *ReportReturn) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

var File_havok_proto protoreflect.FileDescriptor

var file_havok_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x68, 0x61, 0x76, 0x6f, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x77,
	0x6f, 0x73, 0x61, 0x69, 0x2e, 0x68, 0x61, 0x76, 0x6f, 0x6b, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8b, 0x03, 0x0a, 0x0f,
	0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x35, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e,
	0x77, 0x6f, 0x73, 0x61, 0x69, 0x2e, 0x68, 0x61, 0x76, 0x6f, 0x6b, 0x2e, 0x44, 0x69, 0x73, 0x70,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x03, 0x6c, 0x6f, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x77, 0x6f, 0x73, 0x61, 0x69, 0x2e, 0x68, 0x61, 0x76, 0x6f,
	0x6b, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x48, 0x00, 0x52, 0x03, 0x6c,
	0x6f, 0x67, 0x12, 0x31, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x77, 0x6f, 0x73, 0x61, 0x69, 0x2e, 0x68, 0x61, 0x76, 0x6f, 0x6b, 0x2e, 0x4a, 0x6f,
	0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x03, 0x6a, 0x6f, 0x62, 0x12, 0x31, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x77, 0x6f, 0x73, 0x61, 0x69, 0x2e, 0x68, 0x61, 0x76,
	0x6f, 0x6b, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x22, 0xa6, 0x01, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x10,
	0x00, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x0d, 0x0a,
	0x09, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x10, 0x0a, 0x12, 0x0c, 0x0a, 0x08,
	0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x72, 0x74, 0x10, 0x14, 0x12, 0x0b, 0x0a, 0x07, 0x4a, 0x6f,
	0x62, 0x53, 0x74, 0x6f, 0x70, 0x10, 0x15, 0x12, 0x0d, 0x0a, 0x09, 0x4a, 0x6f, 0x62, 0x46, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x10, 0x16, 0x12, 0x14, 0x0a, 0x10, 0x4a, 0x6f, 0x62, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x1d, 0x12, 0x13, 0x0a, 0x0f,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10,
	0x1e, 0x12, 0x0e, 0x0a, 0x0a, 0x4f, 0x63, 0x63, 0x75, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10,
	0x63, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x26, 0x0a, 0x14, 0x52, 0x65, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x22, 0xf7, 0x01, 0x0a, 0x09, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72,
	0x6c, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x3a, 0x0a, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x77, 0x6f, 0x73, 0x61,
	0x69, 0x2e, 0x68, 0x61, 0x76, 0x6f, 0x6b, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x08, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x5f, 0x61,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x07, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x41, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x62, 0x6f, 0x64, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79,
	0x1a, 0x39, 0x0a, 0x0b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x7a, 0x0a, 0x10, 0x4a,
	0x6f, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x72,
	0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x65, 0x67,
	0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x12,
	0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x65, 0x6e,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x75, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x73, 0x74, 0x75, 0x63, 0x6b, 0x22, 0x50, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xc9, 0x02, 0x0a, 0x0b, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x77, 0x6f, 0x73, 0x61,
	0x69, 0x2e, 0x68, 0x61, 0x76, 0x6f, 0x6b, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x12, 0x5b, 0x0a, 0x11, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x77, 0x6f, 0x73, 0x61, 0x69, 0x2e, 0x68, 0x61, 0x76, 0x6f, 0x6b, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10,
	0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x1a, 0x43, 0x0a, 0x15, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa9, 0x07, 0x0a, 0x14, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x69,
	0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x58, 0x0a, 0x0d, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x77, 0x6f, 0x73, 0x61,
	0x69, 0x2e, 0x68, 0x61, 0x76, 0x6f, 0x6b, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x65,
	0x6e, 0x64, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c,
	0x74, 0x72, 0x65, 0x6e, 0x64, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x5b, 0x0a, 0x0e,
	0x74, 0x72, 0x65, 0x6e, 0x64, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x77, 0x6f, 0x73, 0x61, 0x69, 0x2e, 0x68, 0x61, 0x76,
	0x6f, 0x6b, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x46, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x74, 0x72, 0x65, 0x6e,
	0x64, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x12, 0x5b, 0x0a, 0x0e, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x34, 0x2e, 0x77, 0x6f, 0x73, 0x61, 0x69, 0x2e, 0x68, 0x61, 0x76, 0x6f, 0x6b, 0x2e,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x57, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x58, 0x0a, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e,
	0x77, 0x6f, 0x73, 0x61, 0x69, 0x2e, 0x68, 0x61, 0x76, 0x6f, 0x6b, 0x2e, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x6b, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x2a, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x3f, 0x0a, 0x11, 0x54,
	0x72, 0x65, 0x6e, 0x64, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x40, 0x0a, 0x12,
	0x54, 0x72, 0x65, 0x6e, 0x64, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x40,
	0x0a, 0x12, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x3f, 0x0a, 0x11, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x2d, 0x0a, 0x0c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x32, 0x9a, 0x01, 0x0a, 0x05, 0x48, 0x61, 0x76, 0x6f, 0x6b, 0x12, 0x50, 0x0a, 0x09, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x21, 0x2e, 0x77, 0x6f, 0x73, 0x61, 0x69, 0x2e,
	0x68, 0x61, 0x76, 0x6f, 0x6b, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x1c, 0x2e, 0x77, 0x6f, 0x73,
	0x61, 0x69, 0x2e, 0x68, 0x61, 0x76, 0x6f, 0x6b, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x00, 0x30, 0x01, 0x12, 0x3f, 0x0a, 0x06,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x18, 0x2e, 0x77, 0x6f, 0x73, 0x61, 0x69, 0x2e, 0x68,
	0x61, 0x76, 0x6f, 0x6b, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x1a, 0x19, 0x2e, 0x77, 0x6f, 0x73, 0x61, 0x69, 0x2e, 0x68, 0x61, 0x76, 0x6f, 0x6b, 0x2e, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x22, 0x00, 0x42, 0x25, 0x5a,
	0x23, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x77, 0x6f, 0x73, 0x61,
	0x69, 0x2f, 0x68, 0x61, 0x76, 0x6f, 0x6b, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x67, 0x65, 0x6e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_havok_proto_rawDescOnce sync.Once
	file_havok_proto_rawDescData = file_havok_proto_rawDesc
)

func file_havok_proto_rawDescGZIP() []byte {
	file_havok_proto_rawDescOnce.Do(func() {
		file_havok_proto_rawDescData = protoimpl.X.CompressGZIP(file_havok_proto_rawDescData)
	})
	return file_havok_proto_rawDescData
}

var file_havok_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_havok_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_havok_proto_goTypes = []interface{}{
	(DispatcherEvent_Type)(0),     // 0: wosai.havok.DispatcherEvent.Type
	(*DispatcherEvent)(nil),       // 1: wosai.havok.DispatcherEvent
	(*ReplayerRegistration)(nil),  // 2: wosai.havok.ReplayerRegistration
	(*LogRecord)(nil),             // 3: wosai.havok.LogRecord
	(*JobConfiguration)(nil),      // 4: wosai.havok.JobConfiguration
	(*StatsRequest)(nil),          // 5: wosai.havok.StatsRequest
	(*StatsReport)(nil),           // 6: wosai.havok.StatsReport
	(*AttackerStatsWrapper)(nil),  // 7: wosai.havok.AttackerStatsWrapper
	(*ReportReturn)(nil),          // 8: wosai.havok.ReportReturn
	nil,                           // 9: wosai.havok.LogRecord.HeaderEntry
	nil,                           // 10: wosai.havok.StatsReport.PerformanceStatsEntry
	nil,                           // 11: wosai.havok.AttackerStatsWrapper.TrendSuccessEntry
	nil,                           // 12: wosai.havok.AttackerStatsWrapper.TrendFailuresEntry
	nil,                           // 13: wosai.havok.AttackerStatsWrapper.ResponseTimesEntry
	nil,                           // 14: wosai.havok.AttackerStatsWrapper.FailureTimesEntry
	(*timestamppb.Timestamp)(nil), // 15: google.protobuf.Timestamp
}
var file_havok_proto_depIdxs = []int32{
	0,  // 0: wosai.havok.DispatcherEvent.type:type_name -> wosai.havok.DispatcherEvent.Type
	3,  // 1: wosai.havok.DispatcherEvent.log:type_name -> wosai.havok.LogRecord
	4,  // 2: wosai.havok.DispatcherEvent.job:type_name -> wosai.havok.JobConfiguration
	5,  // 3: wosai.havok.DispatcherEvent.stats:type_name -> wosai.havok.StatsRequest
	9,  // 4: wosai.havok.LogRecord.header:type_name -> wosai.havok.LogRecord.HeaderEntry
	15, // 5: wosai.havok.LogRecord.occur_at:type_name -> google.protobuf.Timestamp
	7,  // 6: wosai.havok.StatsReport.stats:type_name -> wosai.havok.AttackerStatsWrapper
	10, // 7: wosai.havok.StatsReport.performance_stats:type_name -> wosai.havok.StatsReport.PerformanceStatsEntry
	11, // 8: wosai.havok.AttackerStatsWrapper.trend_success:type_name -> wosai.havok.AttackerStatsWrapper.TrendSuccessEntry
	12, // 9: wosai.havok.AttackerStatsWrapper.trend_failures:type_name -> wosai.havok.AttackerStatsWrapper.TrendFailuresEntry
	13, // 10: wosai.havok.AttackerStatsWrapper.response_times:type_name -> wosai.havok.AttackerStatsWrapper.ResponseTimesEntry
	14, // 11: wosai.havok.AttackerStatsWrapper.failure_times:type_name -> wosai.havok.AttackerStatsWrapper.FailureTimesEntry
	2,  // 12: wosai.havok.Havok.Subscribe:input_type -> wosai.havok.ReplayerRegistration
	6,  // 13: wosai.havok.Havok.Report:input_type -> wosai.havok.StatsReport
	1,  // 14: wosai.havok.Havok.Subscribe:output_type -> wosai.havok.DispatcherEvent
	8,  // 15: wosai.havok.Havok.Report:output_type -> wosai.havok.ReportReturn
	14, // [14:16] is the sub-list for method output_type
	12, // [12:14] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_havok_proto_init() }
func file_havok_proto_init() {
	if File_havok_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_havok_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DispatcherEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_havok_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplayerRegistration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_havok_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_havok_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_havok_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_havok_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatsReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_havok_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttackerStatsWrapper); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_havok_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportReturn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_havok_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*DispatcherEvent_Log)(nil),
		(*DispatcherEvent_Job)(nil),
		(*DispatcherEvent_Stats)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_havok_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_havok_proto_goTypes,
		DependencyIndexes: file_havok_proto_depIdxs,
		EnumInfos:         file_havok_proto_enumTypes,
		MessageInfos:      file_havok_proto_msgTypes,
	}.Build()
	File_havok_proto = out.File
	file_havok_proto_rawDesc = nil
	file_havok_proto_goTypes = nil
	file_havok_proto_depIdxs = nil
}
