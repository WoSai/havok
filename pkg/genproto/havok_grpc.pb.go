// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: havok.proto

package genproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HavokClient is the client API for Havok service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HavokClient interface {
	Subscribe(ctx context.Context, in *ReplayerRegistration, opts ...grpc.CallOption) (Havok_SubscribeClient, error)
	Report(ctx context.Context, in *StatsReport, opts ...grpc.CallOption) (*ReportReturn, error)
}

type havokClient struct {
	cc grpc.ClientConnInterface
}

func NewHavokClient(cc grpc.ClientConnInterface) HavokClient {
	return &havokClient{cc}
}

func (c *havokClient) Subscribe(ctx context.Context, in *ReplayerRegistration, opts ...grpc.CallOption) (Havok_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &Havok_ServiceDesc.Streams[0], "/wosai.havok.Havok/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &havokSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Havok_SubscribeClient interface {
	Recv() (*DispatcherEvent, error)
	grpc.ClientStream
}

type havokSubscribeClient struct {
	grpc.ClientStream
}

func (x *havokSubscribeClient) Recv() (*DispatcherEvent, error) {
	m := new(DispatcherEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *havokClient) Report(ctx context.Context, in *StatsReport, opts ...grpc.CallOption) (*ReportReturn, error) {
	out := new(ReportReturn)
	err := c.cc.Invoke(ctx, "/wosai.havok.Havok/Report", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HavokServer is the server API for Havok service.
// All implementations should embed UnimplementedHavokServer
// for forward compatibility
type HavokServer interface {
	Subscribe(*ReplayerRegistration, Havok_SubscribeServer) error
	Report(context.Context, *StatsReport) (*ReportReturn, error)
}

// UnimplementedHavokServer should be embedded to have forward compatible implementations.
type UnimplementedHavokServer struct {
}

func (UnimplementedHavokServer) Subscribe(*ReplayerRegistration, Havok_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedHavokServer) Report(context.Context, *StatsReport) (*ReportReturn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Report not implemented")
}

// UnsafeHavokServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HavokServer will
// result in compilation errors.
type UnsafeHavokServer interface {
	mustEmbedUnimplementedHavokServer()
}

func RegisterHavokServer(s grpc.ServiceRegistrar, srv HavokServer) {
	s.RegisterService(&Havok_ServiceDesc, srv)
}

func _Havok_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReplayerRegistration)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HavokServer).Subscribe(m, &havokSubscribeServer{stream})
}

type Havok_SubscribeServer interface {
	Send(*DispatcherEvent) error
	grpc.ServerStream
}

type havokSubscribeServer struct {
	grpc.ServerStream
}

func (x *havokSubscribeServer) Send(m *DispatcherEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _Havok_Report_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatsReport)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HavokServer).Report(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wosai.havok.Havok/Report",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HavokServer).Report(ctx, req.(*StatsReport))
	}
	return interceptor(ctx, in, info, handler)
}

// Havok_ServiceDesc is the grpc.ServiceDesc for Havok service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Havok_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wosai.havok.Havok",
	HandlerType: (*HavokServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Report",
			Handler:    _Havok_Report_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _Havok_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "havok.proto",
}
